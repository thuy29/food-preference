name: Deploy to Production

on:
  workflow_dispatch:
  workflow_run:
    workflows: ['CI CD on Staging']
    types: [completed]

permissions:
  contents: write

jobs:
  deploy-on-main:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Verify Docker Buildx installation
        run: docker buildx version

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Fetch latest model from MLFlow
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python ML-model/fetch_latest_model.py

      - name: Build Docker image for backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-api:latest -f backend/Dockerfile .

      - name: Build Docker image for frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest -f frontend/Dockerfile .

      - name: Push backend Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-api:latest

      - name: Push frontend Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

      - name: Install Elastic Beanstalk CLI
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli



      - name: Deploy backend to AWS Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-3
        run: |
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ secrets.DOCKER_USERNAME }}/backend-api:latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "8000"
              }
            ]
          }' > Dockerrun.aws.json
          eb init -p docker backend-api --region $AWS_REGION
          eb create backend-env --region $AWS_REGION
          eb use backend-env
          eb deploy



      - name: Deploy frontend to AWS Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "eu-west-3"
        run: |
          # Créer un fichier Dockerrun.aws.json pour Elastic Beanstalk
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ secrets.DOCKER_USERNAME }}/frontend-app:latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "80"
              }
            ]
          }' > Dockerrun.aws.json
          # Déployer avec l'outil AWS Elastic Beanstalk CLI
          eb init -p docker frontend-app --region $AWS_REGION
          eb deploy
